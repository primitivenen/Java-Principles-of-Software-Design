/**
 * Write a description of class MarkovWordOne here.
 * 
 * @author (your name) 
 * @version (a version number or a date)
 */

import java.util.*;

public class MarkovWord implements IMarkovModel {
    private String[] myText;
    private Random myRandom;
    private int myOrder;
    
    public MarkovWord(int num) {
        myRandom = new Random();
        myOrder=num;
    }
    
    public void setRandom(int seed) {
        myRandom = new Random(seed);
    }
    
    public void setTraining(String text){
        myText = text.split("\\s+");
    }
    
    public String getRandomText(int numWords){
        StringBuilder sb = new StringBuilder();
        int index = myRandom.nextInt(myText.length-myOrder);  // random word to start with
        /*String key = myText[index];
        sb.append(key);
        sb.append(" ");
        for(int i=0; i<myOrder; i++){
            sb.append(myText[index+i]);
        }
        for(int k=0; k < numWords-myOrder; k++){
            WordGram wg = new WordGram(sb.toString().substring(k,k+myOrder).split(" "), k, myOrder);
            */
        WordGram wg = new WordGram(myText,index,myOrder);
		sb.append(wg.toString());
		sb.append(" ");
		for(int k=0; k < numWords-myOrder; k++){
            ArrayList<String> follows = getFollows(wg);
            if (follows.size() == 0) {
                break;
            }
            index = myRandom.nextInt(follows.size());
            String next = follows.get(index);
            sb.append(next);
            sb.append(" ");
            //wg = new WordGram((sb.toString().substring(k+1,k+myOrder)+next).split(" "), k, myOrder);
            wg = wg.shiftAdd(next);
        }
        
        return sb.toString().trim();
    }
    
    private ArrayList<String> getFollows(WordGram kGram) {
        ArrayList<String> follows = new ArrayList<String>();
		int pos = 0;
		while(pos < myText.length) {
			int start = indexOf(myText, kGram, pos);
			if(start == -1) {
				break;
			}
			if(start >= myText.length - 1) {
				break;
			}
			String next = myText[start+myOrder];
		    follows.add(next);
		    pos = start + 1;
		}
		return follows;
    }

    private int indexOf(String[] words, WordGram target, int start){
        for(int i=start; i<words.length-myOrder; i++){
            //   my wrong answer for(int i=start; i<words.length; i++){
            WordGram wg = new WordGram(words,i,myOrder);
            if(wg.equals(target)){
                return i;
            }
        }
        return -1;
    }
    
}
