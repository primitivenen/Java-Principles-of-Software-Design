import java.util.*;
import edu.duke.*;

public class EarthQuakeClient2 {
    public EarthQuakeClient2() {
        // TODO Auto-generated constructor stub
    }

    public ArrayList<QuakeEntry> filter(ArrayList<QuakeEntry> quakeData, Filter f) { 
        ArrayList<QuakeEntry> answer = new ArrayList<QuakeEntry>();
        for(QuakeEntry qe : quakeData) { 
            if (f.satisfies(qe)) { 
                answer.add(qe); 
            } 
        } 
        
        return answer;
    } 

    public void quakesWithFilter() { 
        EarthQuakeParser parser = new EarthQuakeParser(); 
        //String source = "http://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/all_week.atom";
        String source = "C:\\Users\\WillAdeAge\\Downloads\\SearchingEarthquakeDataStarterProgram\\data\\nov20quakedatasmall.atom";
        ArrayList<QuakeEntry> list  = parser.read(source);         
        System.out.println("read data for "+list.size()+" quakes");

        /*Filter f = new MinMagFilter(4.0); 
        ArrayList<QuakeEntry> m7  = filter(list, f); 
        for (QuakeEntry qe: m7) { 
            System.out.println(qe);
        } */
        /*
        Filter f = new MagnitudeFilter(4.0, 5.0);
        ArrayList<QuakeEntry> m = filter(list, f);
        Filter f2 = new DepthFilter(-35000.0, -12000.0);
        ArrayList<QuakeEntry> m2 = filter(m, f2);
        */
       
        Filter f = new DistanceFilter(new Location(35.42, 139.43), 10000);
        ArrayList<QuakeEntry> m = filter(list, f);
        Filter f2 = new PhraseFilter("end", "Japan");
        ArrayList<QuakeEntry> m2 = filter(m, f2);
        for(QuakeEntry qe:m2){
            System.out.println(qe);
        }
    }

    public void createCSV() {
        EarthQuakeParser parser = new EarthQuakeParser();
        //String source = "../data/nov20quakedata.atom";
        String source = "C:\\Users\\WillAdeAge\\Downloads\\SearchingEarthquakeDataStarterProgram\\data\\nov20quakedatasmall.atom";
        //String source = "http://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/all_week.atom";
        ArrayList<QuakeEntry> list  = parser.read(source);
        dumpCSV(list);
        System.out.println("# quakes read: "+list.size());
    }

    public void dumpCSV(ArrayList<QuakeEntry> list) {
        System.out.println("Latitude,Longitude,Magnitude,Info");
        for(QuakeEntry qe : list){
            System.out.printf("%4.2f,%4.2f,%4.2f,%s\n",
                qe.getLocation().getLatitude(),
                qe.getLocation().getLongitude(),
                qe.getMagnitude(),
                qe.getInfo());
        }
    }    
    public void testMatchAllFilter(){
        EarthQuakeParser parser = new EarthQuakeParser(); 
        String source = "C:\\Users\\WillAdeAge\\Downloads\\SearchingEarthquakeDataStarterProgram\\data\\nov20quakedata.atom";
        ArrayList<QuakeEntry> list  = parser.read(source); 
        for(QuakeEntry qe:list){
            System.out.println(qe);
        }
        System.out.println("read data for "+list.size()+" quakes");
        MatchAllFilter maf = new MatchAllFilter();
        maf.addFilter(new MagnitudeFilter(1.0, 4.0));
        maf.addFilter(new DepthFilter(-180000.0, -30000.0));
        maf.addFilter(new PhraseFilter("any","o"));
        System.out.println("Filters used are: "+maf.getName());
        ArrayList<QuakeEntry> answer = filter(list,maf);
        for(QuakeEntry qe:answer){
            System.out.println(qe);
        }        
        System.out.println("The size is " + answer.size());
    }
    public void testMatchAllFilter2(){
        EarthQuakeParser parser = new EarthQuakeParser(); 
        String source = "C:\\Users\\WillAdeAge\\Downloads\\SearchingEarthquakeDataStarterProgram\\data\\nov20quakedata.atom";
        ArrayList<QuakeEntry> list  = parser.read(source); 
        for(QuakeEntry qe:list){
            System.out.println(qe);
        }
        System.out.println("read data for "+list.size()+" quakes");
        MatchAllFilter maf = new MatchAllFilter();
        maf.addFilter(new MagnitudeFilter(0.0, 5.0));
        maf.addFilter(new DistanceFilter(new Location(55.7308, 9.1153), 3000));
        maf.addFilter(new PhraseFilter("any","e"));
        ArrayList<QuakeEntry> answer = filter(list,maf);
        for(QuakeEntry qe:answer){
            System.out.println(qe);
        }        
        System.out.println("The size is " + answer.size());
    }
    public void testMatchAllFilter3(){
        EarthQuakeParser parser = new EarthQuakeParser(); 
        String source = "C:\\Users\\WillAdeAge\\Downloads\\SearchingEarthquakeDataStarterProgram\\data\\nov20quakedata.atom";
        ArrayList<QuakeEntry> list  = parser.read(source); 
        /*for(QuakeEntry qe:list){
            System.out.println(qe);
        }*/
        System.out.println("read data for "+list.size()+" quakes");
        MatchAllFilter maf = new MatchAllFilter();
        maf.addFilter(new DistanceFilter(new Location(35.42, 139.43), 10000));
        maf.addFilter(new PhraseFilter("end","Japan"));
        ArrayList<QuakeEntry> answer = filter(list,maf);
        for(QuakeEntry qe:answer){
            System.out.println(qe);
        }
    }
    public void testMatchAllFilter4(){
        EarthQuakeParser parser = new EarthQuakeParser(); 
        String source = "C:\\Users\\WillAdeAge\\Downloads\\SearchingEarthquakeDataStarterProgram\\data\\nov20quakedata.atom";
        ArrayList<QuakeEntry> list  = parser.read(source); 
        /*for(QuakeEntry qe:list){
            System.out.println(qe);
        }*/
        System.out.println("read data for "+list.size()+" quakes");
        MatchAllFilter maf = new MatchAllFilter();
        maf.addFilter(new DistanceFilter(new Location(35.42, 139.43), 10000));
        maf.addFilter(new PhraseFilter("end","Japan"));
        System.out.println("Filters used are: "+maf.getName());
        ArrayList<QuakeEntry> answer = filter(list,maf);
        for(QuakeEntry qe:answer){
            System.out.println(qe);
        }
        System.out.println("The size is " + answer.size());
    }

    public void testMatchAllFilter5(){
        EarthQuakeParser parser = new EarthQuakeParser(); 
        String source = "C:\\Users\\WillAdeAge\\Downloads\\SearchingEarthquakeDataStarterProgram\\data\\nov20quakedata.atom";
        ArrayList<QuakeEntry> list  = parser.read(source); 
        /*for(QuakeEntry qe:list){
            System.out.println(qe);
        }*/
        System.out.println("read data for "+list.size()+" quakes");
        MatchAllFilter maf = new MatchAllFilter();
        maf.addFilter(new MagnitudeFilter(4.0, 5.0));
        maf.addFilter(new DepthFilter(-35000,-12000));
        System.out.println("Filters used are: "+maf.getName());
        ArrayList<QuakeEntry> answer = filter(list,maf);
        for(QuakeEntry qe:answer){
            System.out.println(qe);
        }
        System.out.println("The size is " + answer.size());
    }
    
    public void testMatchAllFilter6(){
        EarthQuakeParser parser = new EarthQuakeParser(); 
        String source = "C:\\Users\\WillAdeAge\\Downloads\\SearchingEarthquakeDataStarterProgram\\data\\nov20quakedata.atom";
        ArrayList<QuakeEntry> list  = parser.read(source); 
        /*for(QuakeEntry qe:list){
            System.out.println(qe);
        }*/
        System.out.println("read data for "+list.size()+" quakes");
        MatchAllFilter maf = new MatchAllFilter();
        maf.addFilter(new MagnitudeFilter(0.0, 2.0));
        maf.addFilter(new DepthFilter(-100000,-10000));
        maf.addFilter(new PhraseFilter("any", "a"));
        System.out.println("Filters used are: "+maf.getName());
        ArrayList<QuakeEntry> answer = filter(list,maf);
        for(QuakeEntry qe:answer){
            System.out.println(qe);
        }
        System.out.println("The size is " + answer.size());
    }
    
    public void testMatchAllFilter7(){
        EarthQuakeParser parser = new EarthQuakeParser(); 
        String source = "C:\\Users\\WillAdeAge\\Downloads\\SearchingEarthquakeDataStarterProgram\\data\\nov20quakedata.atom";
        ArrayList<QuakeEntry> list  = parser.read(source); 
        /*for(QuakeEntry qe:list){
            System.out.println(qe);
        }*/
        System.out.println("read data for "+list.size()+" quakes");
        MatchAllFilter maf = new MatchAllFilter();
        maf.addFilter(new MagnitudeFilter(0.0, 3.0));
        maf.addFilter(new DistanceFilter(new Location(36.1314,-95.9372),10000));
        maf.addFilter(new PhraseFilter("any", "Ca"));
        System.out.println("Filters used are: "+maf.getName());
        ArrayList<QuakeEntry> answer = filter(list,maf);
        for(QuakeEntry qe:answer){
            System.out.println(qe);
        }
        System.out.println("The size is " + answer.size());
    }
}
