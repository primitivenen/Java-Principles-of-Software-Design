/*EarthQuakeClient.java*/

import java.util.*;
import edu.duke.*;

public class EarthQuakeClient {
    public EarthQuakeClient() {
        // TODO Auto-generated constructor stub
    }

    public ArrayList<QuakeEntry> filterByMagnitude(ArrayList<QuakeEntry> quakeData,
    double magMin) {
        ArrayList<QuakeEntry> answer = new ArrayList<QuakeEntry>();
        // TODO
        for(QuakeEntry qe:quakeData){
            if(qe.getMagnitude()>magMin){
                answer.add(qe);
            }
        }
        return answer;
    }

    public ArrayList<QuakeEntry> filterByDistanceFrom(ArrayList<QuakeEntry> quakeData,
    double distMax, Location from) {
        ArrayList<QuakeEntry> answer = new ArrayList<QuakeEntry>();
        // TODO
        for(QuakeEntry qe:quakeData){
            if(qe.getLocation().distanceTo(from)<=distMax){
                answer.add(qe);
            }
        }
        return answer;
    }

    public void dumpCSV(ArrayList<QuakeEntry> list){
        System.out.println("Latitude,Longitude,Magnitude,Info");
        for(QuakeEntry qe : list){
            System.out.printf("%4.2f,%4.2f,%4.2f,%s\n",
                qe.getLocation().getLatitude(),
                qe.getLocation().getLongitude(),
                qe.getMagnitude(),
                qe.getInfo());
        }

    }

    public void bigQuakes() {
        EarthQuakeParser parser = new EarthQuakeParser();
        //String source = "http://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/all_week.atom";
        String source = "C:\\Users\\WillAdeAge\\Downloads\\SearchingEarthquakeDataStarterProgram\\data\\nov20quakedata.atom";
        ArrayList<QuakeEntry> list = parser.read(source);
        System.out.println("read data for "+list.size()+" quakes");
        /*
        for(QuakeEntry qe : list){
            if(qe.getMagnitude()>5.0){
                System.out.println(qe);
            }
        }*/
        ArrayList<QuakeEntry> listBig = filterByMagnitude(list, 5.0);
        System.out.println("The number for big quakes are "+listBig.size());
        for(QuakeEntry qe:listBig){
            System.out.println(qe);
        }
    }

    public void closeToMe(){
        EarthQuakeParser parser = new EarthQuakeParser();
        String source = "C:\\Users\\WillAdeAge\\Downloads\\SearchingEarthquakeDataStarterProgram\\data\\nov20quakedata.atom";
        ArrayList<QuakeEntry> list = parser.read(source);
        ArrayList<QuakeEntry> answer=new ArrayList<QuakeEntry>();
        System.out.println("read data for "+list.size()+" quakes");

        // This location is Durham, NC
        Location city = new Location(35.988, -78.907);
        //Location city =  new Location(38.17, -118.82);
        answer = filterByDistanceFrom(list, 1000, city);
        for(QuakeEntry qe:answer){
            System.out.println(qe.getLocation().distanceTo(city)+qe.getInfo());
        }
        System.out.println("Found "+answer.size()+" quakes that match that criteria");
        // This location is Bridgeport, CA
        // Location city =  new Location(38.17, -118.82);

        // TODO
        /*ArrayList<QuakeEntry> close = getClosest(list, city, 10);
        for(int k=0; k<close.size(); k++){
            QuakeEntry entry=close.get(k);
            double distanceInMeters = city.distanceTo(entry.getLocation());
            //System.out.printf("%4.2f\t %s\n",distanceInMeters/1000,);
        }
        */
    }
    public ArrayList<QuakeEntry> getClosest(ArrayList<QuakeEntry> quakeData,Location current,int howMany){
        ArrayList<QuakeEntry> copy=new ArrayList<QuakeEntry>(quakeData);
        ArrayList<QuakeEntry> ret=new ArrayList<QuakeEntry>();
        for(int j=0;j<howMany;j++){
            int minIndex=0;
            for(int k=1;k<copy.size();k++){
                QuakeEntry quake=copy.get(k);
                Location loc=quake.getLocation();
                if(loc.distanceTo(current)<copy.get(minIndex).getLocation().distanceTo(current)){
                    minIndex=k;
                }
            }
            ret.add(copy.get(minIndex));
            copy.remove(minIndex);
        }
        return ret;
    }
    public void createCSV(){
        EarthQuakeParser parser = new EarthQuakeParser();
        String source = "data/nov20quakedata.atom";
        //String source = "http://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/all_week.atom";
        ArrayList<QuakeEntry> list  = parser.read(source);
        dumpCSV(list);
        System.out.println("# quakes read: " + list.size());
        for (QuakeEntry qe : list) {
            System.out.println(qe);
        }
    }
    public ArrayList<QuakeEntry> filterByDepth(ArrayList<QuakeEntry> quakeData,
    double minDepth, double maxDepth) {
        ArrayList<QuakeEntry> answer = new ArrayList<QuakeEntry>();
        // TODO
        for(QuakeEntry qe:quakeData){
            if(qe.getDepth()>minDepth && qe.getDepth()<maxDepth){
                answer.add(qe);
            }
        }
        return answer;
    }
    public void quakesOfDepth(){
        EarthQuakeParser parser = new EarthQuakeParser();
        String source = "C:\\Users\\WillAdeAge\\Downloads\\SearchingEarthquakeDataStarterProgram\\data\\nov20quakedata.atom";
        ArrayList<QuakeEntry> list = parser.read(source);
        System.out.println("read data for "+list.size()+" quakes");
        ArrayList<QuakeEntry> listDepth = filterByDepth(list, -10000.0, -8000.0);
        for(QuakeEntry qe:listDepth){
            System.out.println(qe);
        }       
        System.out.println("Found "+listDepth.size()+" quakes that match that criteria");
    }
    public ArrayList<QuakeEntry> filterByPhrase(ArrayList<QuakeEntry> quakeData, String where, String phrase){
        ArrayList<QuakeEntry> answer = new ArrayList<QuakeEntry>();
        // TODO
        for(QuakeEntry qe:quakeData){
            if(where.equals("start")){
                if(qe.getInfo().startsWith(phrase)){
                    answer.add(qe);
                }
            }
            else if(where.equals("end")){
                if(qe.getInfo().endsWith(phrase)){
                    answer.add(qe);
                }
            } 
            else if(where.equals("any")){
                if(qe.getInfo().indexOf(phrase)!=-1){
                    answer.add(qe);
                }
            } 
        }
        return answer;
    }
    public void quakesByPhrase(){
        EarthQuakeParser parser = new EarthQuakeParser();
        String source = "C:\\Users\\WillAdeAge\\Downloads\\SearchingEarthquakeDataStarterProgram\\data\\nov20quakedata.atom";
        ArrayList<QuakeEntry> list = parser.read(source);
        System.out.println("read data for "+list.size()+" quakes");
        //ArrayList<QuakeEntry> listPhrase = filterByPhrase(list, "end", "California");
        //ArrayList<QuakeEntry> listPhrase = filterByPhrase(list, "any", "Can");
        ArrayList<QuakeEntry> listPhrase = filterByPhrase(list, "any", "Creek");
        for(QuakeEntry qe:listPhrase){
            System.out.println(qe);
        }       
        System.out.println("Found "+listPhrase.size()+" quakes that match that criteria");
    }  
}
